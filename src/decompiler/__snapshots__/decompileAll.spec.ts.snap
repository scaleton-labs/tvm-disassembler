// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`decompileAll should decompile echo 1`] = `
"PROGRAM{
  DECLPROC recv_internal;
  DECLPROC supported_interfaces;
  DECLPROC %hello;
  DECLPROC $Echo$_contract_init;
  DECLPROC $Echo$_contract_router;
  DECLPROC $Echo$_fun_hello;
  DECLPROC $Slice$_fun_asCell;
  DECLPROC $String$_fun_asComment;
  DECLPROC $global_reply;
  DECLPROC $global_send;
  DECLPROC __tact_string_builder_append;
  recv_internal PROC:<{
    SWAP
    CTOS
    4 LDU
    SWAP
    1 PUSHINT
    AND
    1 EQINT
    <{
      -1 PUSHINT
    }> PUSHCONT
    <{
      0 PUSHINT
    }> PUSHCONT
    IFELSE
    SWAP
    LDMSGADDR
    SWAP
    DUP
    SBITS
    267 PUSHINT
    EQUAL
    136 THROWIFNOT
    DUP
    11 PLDU
    DUP
    10 PUSHPOW2
    EQUAL
    OVER
    1279 PUSHINT
    EQUAL
    OR
    136 THROWIFNOT
    10 PUSHPOW2
    EQUAL
    137 THROWIFNOT
    s0 s6 s4 PUXCPU
    s0 s3 XCHG
    4 TUPLE
    __tact_context SETGLOB
    s0 s2 XCHG
    __tact_context_sender SETGLOB
    c4 PUSH
    CTOS
    LDREF
    SWAP
    __tact_context_sys SETGLOB
    1 LDI
    SWAP
    <{
      s0 POP
      NULL
    }> PUSHCONT
    <{
      MYADDR
      11 PLDU
      10 PUSHPOW2
      EQUAL
      137 THROWIFNOT
      257 PUSHINT
      LDIX
      SWAP
      SWAP
      ENDS
      $Echo$_contract_init INLINECALLDICT
    }> PUSHCONT
    IFELSE
    ROTREV
    $Echo$_contract_router INLINECALLDICT
    s0 POP
    s0 POP
    NEWC
    __tact_context_sys GETGLOB
    SWAP
    STREF
    -1 PUSHINT
    SWAP
    1 STI
    ENDC
    c4 POP
  }>
  supported_interfaces PROC:<{
    123515602279859691144772641439386770278 PUSHINT
    209801025412363888721030803524359905849 PUSHINT
    42980537499636128163026532310500881091 PUSHINT
    209474421377847335869795010607481022628 PUSHINT
  }>
  %hello PROC:<{
    c4 PUSH
    CTOS
    LDREF
    SWAP
    __tact_context_sys SETGLOB
    1 LDI
    SWAP
    <{
      s0 POP
      NULL
    }> PUSHCONT
    <{
      MYADDR
      11 PLDU
      10 PUSHPOW2
      EQUAL
      137 THROWIFNOT
      257 PUSHINT
      LDIX
      SWAP
      SWAP
      ENDS
      $Echo$_contract_init INLINECALLDICT
    }> PUSHCONT
    IFELSE
    SWAP
    $Echo$_fun_hello INLINECALLDICT
    NIP
  }>
  $Echo$_contract_init PROCREF:<{
    s0 POP
    NULL
  }>
  $Echo$_contract_router PROCREF:<{
    2 SAVE
    SAMEALTSAVE
    0 PUSHINT
    OVER
    SBITS
    31 GTINT
    <{
      s0 POP
      DUP
      32 PLDU
    }> PUSHCONT
    IF
    s0 s2 XCHG
    <{
      DROP2
      -1 PUSHINT
    }> PUSHCONT
    IFJMP
    SWAP
    0 EQINT
    <{
      DUP
      SBITS
      31 GTINT
      <{
        32 PUSHINT
        SDSKIPFIRST
        $String$_fun_asComment INLINECALLDICT
        $global_reply INLINECALLDICT
        -1 PUSHINT
        RETFALSE
      }> PUSHCONT
      IFJMP
    }> PUSHCONT
    IF
    $Slice$_fun_asCell INLINECALLDICT
    $global_reply INLINECALLDICT
    -1 PUSHINT
  }>
  $Echo$_fun_hello PROCREF:<{
    NEWC
    NIL
    SWAP
    TPUSH
    NULL
    TPUSH
    x{48656C6C6F2C208} PUSHSLICE
    __tact_string_builder_append INLINECALLDICT
    SWAP
    __tact_string_builder_append INLINECALLDICT
    2 UNTUPLE
    SWAP
    ENDC
    <{
      OVER
      ISNULL
      NOT
    }> PUSHCONT
    <{
      SWAP
      2 UNTUPLE
      ROTREV
      STREF
      ENDC
    }> PUSHCONT
    WHILE
    NIP
    CTOS
  }>
  $Slice$_fun_asCell PROCREF:<{
    NEWC
    SWAP
    STSLICER
    ENDC
  }>
  $String$_fun_asComment PROCREF:<{
    NEWC
    0 PUSHINT
    SWAP
    32 STU
    NIL
    SWAP
    TPUSH
    NULL
    TPUSH
    SWAP
    __tact_string_builder_append INLINECALLDICT
    2 UNTUPLE
    SWAP
    ENDC
    <{
      OVER
      ISNULL
      NOT
    }> PUSHCONT
    <{
      SWAP
      2 UNTUPLE
      ROTREV
      STREF
      ENDC
    }> PUSHCONT
    WHILE
    NIP
  }>
  $global_reply PROCREF:<{
    -1 PUSHINT
    __tact_context_sender GETGLOB
    0 PUSHINT
    ROT
    s0 s3 XCHG
    66 PUSHINT
    SWAP
    NULL
    NULL
    $global_send INLINECALLDICT
  }>
  $global_send PROCREF:<{
    NEWC
    1 PUSHINT
    SWAP
    2 STI
    s0 s7 XCHG2
    SWAP
    1 STI
    0 PUSHINT
    SWAP
    3 STI
    s0 s5 XCHG2
    DUP
    SBITS
    267 PUSHINT
    EQUAL
    136 THROWIFNOT
    DUP
    11 PLDU
    DUP
    10 PUSHPOW2
    EQUAL
    OVER
    1279 PUSHINT
    EQUAL
    OR
    136 THROWIFNOT
    10 PUSHPOW2
    EQUAL
    137 THROWIFNOT
    STSLICER
    s0 s3 XCHG2
    STGRAMS
    0 PUSHINT
    SWAP
    105 STI
    s3 PUSH
    ISNULL
    NOT
    <{
      -1 PUSHINT
    }> PUSHCONT
    <{
      s4 PUSH
      ISNULL
      NOT
    }> PUSHCONT
    IFELSE
    <{
      s3 POP
      s3 POP
      SWAP
      0 PUSHINT
      SWAP
      1 STI
    }> PUSHCONT
    <{
      -1 PUSHINT
      SWAP
      1 STI
      NEWC
      0 PUSHINT
      SWAP
      1 STI
      0 PUSHINT
      SWAP
      1 STI
      s4 PUSH
      ISNULL
      NOT
      <{
        -1 PUSHINT
        SWAP
        1 STI
        s0 s4 XCHG
        DUP
        ISNULL
        128 THROWIF
        s0 s4 XCHG2
        STREF
      }> PUSHCONT
      <{
        s4 POP
        s0 s3 XCHG
        0 PUSHINT
        SWAP
        1 STI
      }> PUSHCONT
      IFELSE
      s4 PUSH
      ISNULL
      NOT
      <{
        -1 PUSHINT
        SWAP
        1 STI
        s0 s4 XCHG
        DUP
        ISNULL
        128 THROWIF
        s0 s4 XCHG2
        STREF
      }> PUSHCONT
      <{
        s4 POP
        s0 s3 XCHG
        0 PUSHINT
        SWAP
        1 STI
      }> PUSHCONT
      IFELSE
      0 PUSHINT
      SWAP
      1 STI
      s0 s2 XCHG
      -1 PUSHINT
      SWAP
      1 STI
      s0 s2 XCHG
      ENDC
      ROT
      STREF
    }> IFREFELSE
    OVER
    ISNULL
    NOT
    <{
      -1 PUSHINT
      SWAP
      1 STI
      SWAP
      DUP
      ISNULL
      128 THROWIF
      SWAP
      STREF
    }> PUSHCONT
    <{
      NIP
      0 PUSHINT
      SWAP
      1 STI
    }> PUSHCONT
    IFELSE
    ENDC
    SWAP
    SENDRAWMSG
  }>
  __tact_string_builder_append PROCREF:<{
    DUP
    SREFS
    OVER
    SBITS
    <{
      DUP
      0 GTINT
      s2 PUSH
      0 GTINT
      OR
    }> PUSHCONT
    <{
      s0 s3 XCHG
      2 UNTUPLE
      127 PUSHINT
      s2 PUSH
      BBITS
      3 RSHIFT
      SUB
      s0 s5 XCHG
      3 RSHIFT
      s5 s5 XCPU
      MIN
      DUP
      0 GTINT
      <{
        DUP
        3 LSHIFT
        s1 s5 XCHG
        LDSLICEX
        s3 s3 XCHG2
        STSLICER
        s0 s1 s4 XCHG3
      }> PUSHCONT
      IF
      ROTREV
      2 TUPLE
      s4 s1 PUSH2
      SUB
      0 GTINT
      <{
        NEWC
        SWAP
        2 TUPLE
        s4 s4 XCHG2
        SUB
        3 LSHIFT
      }> PUSHCONT
      <{
        NIP
        s3 POP
        0 GTINT
        <{
          LDREF
          s0 POP
          CTOS
          DUP
          SREFS
          OVER
          SBITS
        }> PUSHCONT
        <{
          0 PUSHINT
          DUP
        }> PUSHCONT
        IFELSE
      }> PUSHCONT
      IFELSE
    }> PUSHCONT
    WHILE
    3 BLKDROP
  }>
}END>c"
`;

exports[`decompileAll should decompile highload wallet 1`] = `
"PROGRAM{
  DECLPROC recv_external;
  DECLPROC recv_internal;
  DECLPROC get_public_key;
  DECLPROC seqno;
  recv_external PROC:<{
    9 PUSHPOW2
    LDSLICEX
    DUP
    32 LDU
    32 LDU
    32 LDU
    s0 s2 XCHG
    NOW
    LEQ
    35 THROWIF
    c4 PUSH
    CTOS
    32 LDU
    32 LDU
    256 LDU
    ENDS
    s3 s2 XCPU
    EQUAL
    33 THROWIFNOT
    s4 s4 XCPU
    EQUAL
    34 THROWIFNOT
    s0 s4 XCHG
    HASHSU
    s0 s5 s5 XC2PU
    CHKSIGNU
    35 THROWIFNOT
    LDDICT
    ENDS
    ACCEPT
    -1 PUSHINT
    <{
      OVER
      16 PUSHINT
      DICTIGETNEXT
      NULLSWAPIFNOT2
      DUP
      <{
        s0 s2 XCHG
        8 LDU
        LDREF
        s0 POP
        SWAP
        SENDRAWMSG
      }> PUSHCONT
      <{
        s2 POP
      }> PUSHCONT
      IFELSE
      SWAP
      NOT
    }> PUSHCONT
    UNTIL
    DROP2
    SWAP
    INC
    NEWC
    32 STU
    32 STU
    256 STU
    ENDC
    c4 POP
  }>
  recv_internal PROC:<{
    s0 POP
  }>
  get_public_key PROC:<{
    c4 PUSH
    CTOS
    64 LDU
    NIP
    256 PLDU
  }>
  seqno PROC:<{
    c4 PUSH
    CTOS
    32 PLDU
  }>
}END>c"
`;

exports[`decompileAll should decompile highload wallet 2`] = `
"PROGRAM{
DECLPROC recv_external;
DECLPROC recv_internal;
DECLPROC get_public_key;
DECLPROC seqno;
{"op":"recv_external PROC:<{","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":8,"length":0}
{"op":"9 PUSHPOW2","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":8,"length":16}
{"op":"LDSLICEX","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":24,"length":16}
{"op":"DUP","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":40,"length":8}
{"op":"32 LDU","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":48,"length":16}
{"op":"32 LDU","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":64,"length":16}
{"op":"32 LDU","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":80,"length":16}
{"op":"s0 s2 XCHG","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":96,"length":8}
{"op":"NOW","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":104,"length":16}
{"op":"LEQ","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":120,"length":8}
{"op":"35 THROWIF","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":128,"length":16}
{"op":"c4 PUSH","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":144,"length":16}
{"op":"CTOS","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":160,"length":8}
{"op":"32 LDU","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":168,"length":16}
{"op":"32 LDU","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":184,"length":16}
{"op":"256 LDU","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":200,"length":16}
{"op":"ENDS","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":216,"length":8}
{"op":"s3 s2 XCPU","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":224,"length":16}
{"op":"EQUAL","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":240,"length":8}
{"op":"33 THROWIFNOT","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":248,"length":16}
{"op":"s4 s4 XCPU","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":264,"length":16}
{"op":"EQUAL","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":280,"length":8}
{"op":"34 THROWIFNOT","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":288,"length":16}
{"op":"s0 s4 XCHG","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":304,"length":8}
{"op":"HASHSU","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":312,"length":16}
{"op":"s0 s5 s5 XC2PU","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":328,"length":24}
{"op":"CHKSIGNU","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":352,"length":16}
{"op":"35 THROWIFNOT","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":368,"length":16}
{"op":"LDDICT","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":384,"length":16}
{"op":"ENDS","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":400,"length":8}
{"op":"ACCEPT","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":408,"length":16}
{"op":"-1 PUSHINT","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":424,"length":8}
{"op":"<{","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":432,"length":192}
{"op":"OVER","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":448,"length":8}
{"op":"16 PUSHINT","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":456,"length":16}
{"op":"DICTIGETNEXT","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":472,"length":16}
{"op":"NULLSWAPIFNOT2","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":488,"length":16}
{"op":"DUP","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":504,"length":8}
{"op":"<{","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":512,"length":72}
{"op":"s0 s2 XCHG","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":520,"length":8}
{"op":"8 LDU","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":528,"length":16}
{"op":"LDREF","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":544,"length":8}
{"op":"s0 POP","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":552,"length":8}
{"op":"SWAP","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":560,"length":8}
{"op":"SENDRAWMSG","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":568,"length":16}
{"op":"}> PUSHCONT","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":512,"length":72}
{"op":"<{","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":584,"length":16}
{"op":"s2 POP","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":592,"length":8}
{"op":"}> PUSHCONT","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":584,"length":16}
{"op":"IFELSE","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":600,"length":8}
{"op":"SWAP","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":608,"length":8}
{"op":"NOT","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":616,"length":8}
{"op":"}> PUSHCONT","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":432,"length":192}
{"op":"UNTIL","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":624,"length":8}
{"op":"DROP2","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":632,"length":8}
{"op":"SWAP","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":640,"length":8}
{"op":"INC","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":648,"length":8}
{"op":"NEWC","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":656,"length":8}
{"op":"32 STU","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":664,"length":16}
{"op":"32 STU","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":680,"length":16}
{"op":"256 STU","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":696,"length":16}
{"op":"ENDC","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":712,"length":8}
{"op":"c4 POP","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":720,"length":16}
{"op":"}>","hash":"7a7f791f503cf7e13f5a9bcc616b295481e3377da5b46143162d892b3ffeaefd","offset":8,"length":0}
{"op":"recv_internal PROC:<{","hash":"8c63627141b5c6720a211c04c584caaf35ef97b03192ab51e6652707636892e3","offset":8,"length":0}
{"op":"s0 POP","hash":"8c63627141b5c6720a211c04c584caaf35ef97b03192ab51e6652707636892e3","offset":8,"length":8}
{"op":"}>","hash":"8c63627141b5c6720a211c04c584caaf35ef97b03192ab51e6652707636892e3","offset":8,"length":0}
{"op":"get_public_key PROC:<{","hash":"c3ccd69d49b144e3b0e510f1f3c9ca9660ac3ee00d2bd18892b23cb9d04f955c","offset":20,"length":0}
{"op":"c4 PUSH","hash":"c3ccd69d49b144e3b0e510f1f3c9ca9660ac3ee00d2bd18892b23cb9d04f955c","offset":20,"length":16}
{"op":"CTOS","hash":"c3ccd69d49b144e3b0e510f1f3c9ca9660ac3ee00d2bd18892b23cb9d04f955c","offset":36,"length":8}
{"op":"64 LDU","hash":"c3ccd69d49b144e3b0e510f1f3c9ca9660ac3ee00d2bd18892b23cb9d04f955c","offset":44,"length":16}
{"op":"NIP","hash":"c3ccd69d49b144e3b0e510f1f3c9ca9660ac3ee00d2bd18892b23cb9d04f955c","offset":60,"length":8}
{"op":"256 PLDU","hash":"c3ccd69d49b144e3b0e510f1f3c9ca9660ac3ee00d2bd18892b23cb9d04f955c","offset":68,"length":24}
{"op":"}>","hash":"c3ccd69d49b144e3b0e510f1f3c9ca9660ac3ee00d2bd18892b23cb9d04f955c","offset":20,"length":0}
{"op":"seqno PROC:<{","hash":"a89897815e1290122d87908d8405c5a508b2d94fc5d01301f3a5b16994d3f2f4","offset":20,"length":0}
{"op":"c4 PUSH","hash":"a89897815e1290122d87908d8405c5a508b2d94fc5d01301f3a5b16994d3f2f4","offset":20,"length":16}
{"op":"CTOS","hash":"a89897815e1290122d87908d8405c5a508b2d94fc5d01301f3a5b16994d3f2f4","offset":36,"length":8}
{"op":"32 PLDU","hash":"a89897815e1290122d87908d8405c5a508b2d94fc5d01301f3a5b16994d3f2f4","offset":44,"length":24}
{"op":"}>","hash":"a89897815e1290122d87908d8405c5a508b2d94fc5d01301f3a5b16994d3f2f4","offset":20,"length":0}
}END>c"
`;

exports[`decompileAll should decompile wallet 1`] = `
"PROGRAM{
  DECLPROC recv_internal;
  DECLPROC seqno;
  DECLPROC ?fun_86520;
  DECLPROC supported_interfaces;
  DECLPROC ?fun_114762;
  DECLPROC ?fun_ref_3301d2d6bbf180a4;
  DECLPROC ?fun_ref_40d98146a47dbe3b;
  DECLPROC ?fun_ref_44086a5ce86162fe;
  DECLPROC ?fun_ref_b2f99ae1a1dd4dfb;
  DECLPROC ?fun_ref_cd29dd004f76b216;
  DECLPROC ?fun_ref_e3ac26e214db4b5d;
  recv_internal PROC:<{
    SWAP
    CTOS
    4 LDU
    SWAP
    1 PUSHINT
    AND
    1 EQINT
    <{
      -1 PUSHINT
    }> PUSHCONT
    <{
      0 PUSHINT
    }> PUSHCONT
    IFELSE
    SWAP
    LDMSGADDR
    SWAP
    DUP
    SBITS
    267 PUSHINT
    EQUAL
    136 THROWIFNOT
    DUP
    11 PLDU
    DUP
    10 PUSHPOW2
    EQUAL
    OVER
    1279 PUSHINT
    EQUAL
    OR
    136 THROWIFNOT
    10 PUSHPOW2
    EQUAL
    137 THROWIFNOT
    s0 s6 s4 PUXCPU
    s0 s3 XCHG
    4 TUPLE
    1 SETGLOB
    s0 s2 XCHG
    2 SETGLOB
    c4 PUSH
    CTOS
    LDREF
    SWAP
    3 SETGLOB
    1 LDI
    SWAP
    <{
      32 LDU
      256 LDU
      64 LDU
      3 1 BLKSWAP
      1 3 BLKDROP2
    }> PUSHCONT
    <{
      MYADDR
      11 PLDU
      10 PUSHPOW2
      EQUAL
      137 THROWIFNOT
      257 PUSHINT
      LDIX
      257 PUSHINT
      LDIX
      ROTREV
      s0 s2 XCHG
      ENDS
      SWAP
      ?fun_ref_cd29dd004f76b216 INLINECALLDICT
    }> PUSHCONT
    IFELSE
    2 3 BLKSWAP
    ?fun_ref_e3ac26e214db4b5d INLINECALLDICT
    s0 POP
    NEWC
    3 GETGLOB
    SWAP
    STREF
    -1 PUSHINT
    SWAP
    1 STI
    3 1 BLKSWAP
    s2 s3 XCHG2
    32 STU
    256 STU
    64 STU
    ENDC
    c4 POP
  }>
  seqno PROC:<{
    c4 PUSH
    CTOS
    LDREF
    SWAP
    3 SETGLOB
    1 LDI
    SWAP
    <{
      32 LDU
      256 LDU
      64 LDU
      3 1 BLKSWAP
      1 3 BLKDROP2
    }> PUSHCONT
    <{
      MYADDR
      11 PLDU
      10 PUSHPOW2
      EQUAL
      137 THROWIFNOT
      257 PUSHINT
      LDIX
      257 PUSHINT
      LDIX
      ROTREV
      s0 s2 XCHG
      ENDS
      SWAP
      ?fun_ref_cd29dd004f76b216 INLINECALLDICT
    }> PUSHCONT
    IFELSE
    ?fun_ref_b2f99ae1a1dd4dfb INLINECALLDICT
    3 1 BLKDROP2
  }>
  ?fun_86520 PROC:<{
    c4 PUSH
    CTOS
    LDREF
    SWAP
    3 SETGLOB
    1 LDI
    SWAP
    <{
      32 LDU
      256 LDU
      64 LDU
      3 1 BLKSWAP
      1 3 BLKDROP2
    }> PUSHCONT
    <{
      MYADDR
      11 PLDU
      10 PUSHPOW2
      EQUAL
      137 THROWIFNOT
      257 PUSHINT
      LDIX
      257 PUSHINT
      LDIX
      ROTREV
      s0 s2 XCHG
      ENDS
      SWAP
      ?fun_ref_cd29dd004f76b216 INLINECALLDICT
    }> PUSHCONT
    IFELSE
    ?fun_ref_44086a5ce86162fe INLINECALLDICT
    3 1 BLKDROP2
  }>
  supported_interfaces PROC:<{
    123515602279859691144772641439386770278 PUSHINT
    209801025412363888721030803524359905849 PUSHINT
    42980537499636128163026532310500881091 PUSHINT
    209474421377847335869795010607481022628 PUSHINT
  }>
  ?fun_114762 PROC:<{
    c4 PUSH
    CTOS
    LDREF
    SWAP
    3 SETGLOB
    1 LDI
    SWAP
    <{
      32 LDU
      256 LDU
      64 LDU
      3 1 BLKSWAP
      1 3 BLKDROP2
    }> PUSHCONT
    <{
      MYADDR
      11 PLDU
      10 PUSHPOW2
      EQUAL
      137 THROWIFNOT
      257 PUSHINT
      LDIX
      257 PUSHINT
      LDIX
      ROTREV
      s0 s2 XCHG
      ENDS
      SWAP
      ?fun_ref_cd29dd004f76b216 INLINECALLDICT
    }> PUSHCONT
    IFELSE
    ?fun_ref_40d98146a47dbe3b INLINECALLDICT
    3 1 BLKDROP2
  }>
  ?fun_ref_3301d2d6bbf180a4 PROCREF:<{
    NEWC
    1 PUSHINT
    SWAP
    2 STI
    s0 s7 XCHG2
    SWAP
    1 STI
    0 PUSHINT
    SWAP
    3 STI
    s0 s5 XCHG2
    DUP
    SBITS
    267 PUSHINT
    EQUAL
    136 THROWIFNOT
    DUP
    11 PLDU
    DUP
    10 PUSHPOW2
    EQUAL
    OVER
    1279 PUSHINT
    EQUAL
    OR
    136 THROWIFNOT
    10 PUSHPOW2
    EQUAL
    137 THROWIFNOT
    STSLICER
    s0 s3 XCHG2
    STGRAMS
    0 PUSHINT
    SWAP
    105 STI
    s3 PUSH
    ISNULL
    NOT
    <{
      -1 PUSHINT
    }> PUSHCONT
    <{
      s4 PUSH
      ISNULL
      NOT
    }> PUSHCONT
    IFELSE
    <{
      s3 POP
      s3 POP
      SWAP
      0 PUSHINT
      SWAP
      1 STI
    }> PUSHCONT
    <{
      -1 PUSHINT
      SWAP
      1 STI
      NEWC
      0 PUSHINT
      SWAP
      1 STI
      0 PUSHINT
      SWAP
      1 STI
      s4 PUSH
      ISNULL
      NOT
      <{
        -1 PUSHINT
        SWAP
        1 STI
        s0 s4 XCHG
        DUP
        ISNULL
        128 THROWIF
        s0 s4 XCHG2
        STREF
      }> PUSHCONT
      <{
        s4 POP
        s0 s3 XCHG
        0 PUSHINT
        SWAP
        1 STI
      }> PUSHCONT
      IFELSE
      s4 PUSH
      ISNULL
      NOT
      <{
        -1 PUSHINT
        SWAP
        1 STI
        s0 s4 XCHG
        DUP
        ISNULL
        128 THROWIF
        s0 s4 XCHG2
        STREF
      }> PUSHCONT
      <{
        s4 POP
        s0 s3 XCHG
        0 PUSHINT
        SWAP
        1 STI
      }> PUSHCONT
      IFELSE
      0 PUSHINT
      SWAP
      1 STI
      s0 s2 XCHG
      -1 PUSHINT
      SWAP
      1 STI
      s0 s2 XCHG
      ENDC
      ROT
      STREF
    }> IFREFELSE
    OVER
    ISNULL
    NOT
    <{
      -1 PUSHINT
      SWAP
      1 STI
      SWAP
      DUP
      ISNULL
      128 THROWIF
      SWAP
      STREF
    }> PUSHCONT
    <{
      NIP
      0 PUSHINT
      SWAP
      1 STI
    }> PUSHCONT
    IFELSE
    ENDC
    SWAP
    SENDRAWMSG
  }>
  ?fun_ref_40d98146a47dbe3b PROCREF:<{
    DUP
  }>
  ?fun_ref_44086a5ce86162fe PROCREF:<{
    OVER
  }>
  ?fun_ref_b2f99ae1a1dd4dfb PROCREF:<{
    s2 PUSH
  }>
  ?fun_ref_cd29dd004f76b216 PROCREF:<{
    0 PUSHINT
    ROTREV
  }>
  ?fun_ref_e3ac26e214db4b5d PROCREF:<{
    2 SAVE
    SAMEALTSAVE
    0 PUSHINT
    OVER
    SBITS
    31 GTINT
    <{
      s0 POP
      DUP
      32 PLDU
    }> PUSHCONT
    IF
    s0 s2 XCHG
    <{
      NIP
      s0 POP
      -1 PUSHINT
    }> PUSHCONT
    IFJMP
    OVER
    123 EQINT
    <{
      NIP
      32 LDU
      SWAP
      123 EQINT
      129 THROWIFNOT
      LDREF
      SWAP
      CTOS
      SWAP
      32 LDU
      8 LDU
      LDMSGADDR
      SWAP
      DUP
      SBITS
      267 PUSHINT
      EQUAL
      136 THROWIFNOT
      DUP
      11 PLDU
      DUP
      10 PUSHPOW2
      EQUAL
      OVER
      1279 PUSHINT
      EQUAL
      OR
      136 THROWIFNOT
      10 PUSHPOW2
      EQUAL
      137 THROWIFNOT
      SWAP
      LDGRAMS
      1 LDI
      SWAP
      <{
        LDREF
      }> PUSHCONT
      <{
        NULL
        SWAP
      }> PUSHCONT
      IFELSE
      5 1 BLKSWAP
      s5 s6 XCHG
      1 6 BLKDROP2
      s4 s3 s2 PUSH3
      s4 s3 PUSH2
      NEWC
      5 1 BLKSWAP
      s4 s5 XCHG2
      32 STU
      s1 s2 XCHG
      8 STU
      SWAP
      DUP
      SBITS
      267 PUSHINT
      EQUAL
      136 THROWIFNOT
      DUP
      11 PLDU
      DUP
      10 PUSHPOW2
      EQUAL
      OVER
      1279 PUSHINT
      EQUAL
      OR
      136 THROWIFNOT
      10 PUSHPOW2
      EQUAL
      137 THROWIFNOT
      STSLICER
      SWAP
      STGRAMS
      OVER
      ISNULL
      NOT
      <{
        -1 PUSHINT
        SWAP
        1 STI
        STREF
      }> PUSHCONT
      <{
        0 PUSHINT
        s2 POP
        1 STI
      }> PUSHCONT
      IFELSE
      ENDC
      HASHCU
      48401 PUSHINT
      s7 s9 XCPU
      CHKSIGNU
      s1 s6 XCHG
      THROWANYIFNOT
      17654 PUSHINT
      s4 s8 XCPU
      EQUAL
      s1 s4 XCHG
      THROWANYIFNOT
      s0 s6 XCHG
      INC
      s3 s1 s6 XCHG3
      s0 s2 XCHG
      -1 PUSHINT
      s4 s4 s4 XCHG3
      NULL
      NULL
      ?fun_ref_3301d2d6bbf180a4 INLINECALLDICT
      -1 PUSHINT
    }> PUSHCONT
    IFJMP
    OVER
    0 EQINT
    OVER
    SBITS
    33 LESSINT
    AND
    <{
      DROP2
      s0 s2 XCHG
      INC
      s0 s2 XCHG
      -1 PUSHINT
    }> PUSHCONT
    IFJMP
    SWAP
    0 EQINT
    <{
      DUP
      HASHSU
      DUP
      60529586900441909508163366315693238357781362892506273907639555627111304786502 PUSHINT
      EQUAL
      <{
        DROP2
        -1 PUSHINT
        RETFALSE
      }> PUSHCONT
      IFJMP
      DUP
      6394821005585434778314826493057958727299638479680279508357575356610368139954 PUSHINT
      EQUAL
      <{
        DROP2
        s0 s2 XCHG
        INC
        s0 s2 XCHG
        -1 PUSHINT
        RETFALSE
      }> PUSHCONT
      IFJMP
      DUP
      17450106222413158396152902420493430928103212707093656501341314190009046701113 PUSHINT
      EQUAL
      <{
        DROP2
        s0 s2 XCHG
        INC
        s0 s2 XCHG
        -1 PUSHINT
        RETFALSE
      }> PUSHCONT
      IFJMP
      70845166824474961660404539579183775280814018357735859006660992311266151320569 PUSHINT
      EQUAL
      <{
        s0 POP
        -1 PUSHINT
        RETFALSE
      }> PUSHCONT
      IFJMP
    }> IFREF
    s0 POP
    s0 s2 XCHG
    INC
    s0 s2 XCHG
    -1 PUSHINT
  }>
}END>c"
`;

exports[`decompileAll should decompile wallet v1 1`] = `
"SETCP0
DUP
IFNOTRET
INC
32 THROWIF
512 PUSHINT
LDSLICEX
DUP
32 PLDU
c4 PUSH
CTOS
32 LDU
256 LDU
ENDS
s1 s2 XCPU
EQUAL
33 THROWIFNOT
s2 PUSH
HASHSU
s0 s4 s4 XC2PU
CHKSIGNU
34 THROWIFNOT
ACCEPT
SWAP
32 LDU
NIP
DUP
SREFS
<{
  8 LDU
  LDREF
  s0 s2 XCHG
  SENDRAWMSG
}> PUSHCONT
IF
ENDS
INC
NEWC
32 STU
256 STU
ENDC
c4 POP"
`;

exports[`decompileAll should decompile wallet v2 1`] = `
"SETCP0
DUP
IFNOTRET
DUP
85143 PUSHINT
EQUAL
<{
  s0 POP
  c4 PUSH
  CTOS
  32 PLDU
}> PUSHCONT
IFJMP
INC
32 THROWIF
9 PUSHPOW2
LDSLICEX
DUP
32 LDU
32 LDU
SWAP
NOW
LEQ
35 THROWIF
c4 PUSH
CTOS
32 LDU
256 LDU
ENDS
s3 s1 XCPU
EQUAL
33 THROWIFNOT
s0 s3 XCHG
HASHSU
s0 s4 s2 XC2PU
CHKSIGNU
34 THROWIFNOT
ACCEPT
s0 s2 XCHG
<{
  DUP
  SREFS
}> PUSHCONT
<{
  8 LDU
  LDREF
  s0 s2 XCHG
  SENDRAWMSG
}> PUSHCONT
WHILE
ENDS
INC
NEWC
32 STU
256 STU
ENDC
c4 POP"
`;

exports[`decompileAll should decompile wallet v3 1`] = `
"SETCP0
DUP
IFNOTRET
DUP
85143 PUSHINT
EQUAL
OVER
78748 PUSHINT
EQUAL
OR
<{
  1 PUSHINT
  AND
  c4 PUSH
  CTOS
  32 LDU
  32 LDU
  NIP
  256 PLDU
  CONDSEL
}> PUSHCONT
IFJMP
INC
32 THROWIF
9 PUSHPOW2
LDSLICEX
DUP
32 LDU
32 LDU
32 LDU
NOW
s1 s3 XCHG
LEQ
35 THROWIF
c4 PUSH
CTOS
32 LDU
32 LDU
256 LDU
ENDS
s3 s2 XCPU
EQUAL
33 THROWIFNOT
s4 s4 XCPU
EQUAL
34 THROWIFNOT
s0 s4 XCHG
HASHSU
s0 s5 s5 XC2PU
CHKSIGNU
35 THROWIFNOT
ACCEPT
<{
  DUP
  SREFS
}> PUSHCONT
<{
  8 LDU
  LDREF
  s0 s2 XCHG
  SENDRAWMSG
}> PUSHCONT
WHILE
ENDS
SWAP
INC
NEWC
32 STU
32 STU
256 STU
ENDC
c4 POP"
`;

exports[`decompileAll should decompile wallet v4 1`] = `
"PROGRAM{
  DECLPROC recv_external;
  DECLPROC recv_internal;
  DECLPROC is_plugin_installed;
  DECLPROC get_public_key;
  DECLPROC get_subwallet_id;
  DECLPROC seqno;
  DECLPROC get_plugin_list;
  recv_external PROC:<{
    9 PUSHPOW2
    LDSLICEX
    DUP
    32 LDU
    32 LDU
    32 LDU
    s0 s2 XCHG
    NOW
    LEQ
    36 THROWIF
    c4 PUSH
    CTOS
    32 LDU
    32 LDU
    256 LDU
    LDDICT
    ENDS
    s4 s3 XCPU
    EQUAL
    33 THROWIFNOT
    s5 s1 XCPU
    EQUAL
    34 THROWIFNOT
    s0 s5 XCHG
    HASHSU
    s0 s6 s4 XC2PU
    CHKSIGNU
    35 THROWIFNOT
    ACCEPT
    s4 PUSH
    INC
    NEWC
    32 STU
    s4 s1 PUXC
    32 STU
    s3 s1 PUXC
    256 STU
    s1 s1 PUXC
    STDICT
    ENDC
    c4 POP
    COMMIT
    SWAP
    8 LDU
    OVER
    0 EQINT
    <{
      5 1 BLKDROP2
      <{
        DUP
        SREFS
      }> PUSHCONT
      <{
        8 LDU
        LDREF
        s0 s2 XCHG
        SENDRAWMSG
      }> PUSHCONT
      WHILE
      s0 POP
    }> PUSHCONT
    IFJMP
    OVER
    1 EQINT
    <{
      8 LDI
      LDGRAMS
      LDREF
      LDREF
      s2 PUSH
      HASHCU
      s0 s5 XCHG
      NEWC
      8 STI
      s1 s5 XCHG
      256 STU
      ENDC
      CTOS
      7 PUSHINT
      4 PUSHINT
      24 PUSHINT
      NEWC
      6 STU
      3 STU
      s2 PUSH
      STSLICER
      s0 s5 XCHG2
      STGRAMS
      s1 s4 XCHG
      108 STU
      s1 s2 XCHG
      STREF
      STREF
      ENDC
      3 PUSHINT
      SENDRAWMSG
      NEWC
      s0 s1 s4 XCHG3
      264 PUSHINT
      DICTADDB
      39 THROWIFNOT
      s0 s2 XCHG
    }> IFREF
    OVER
    2 EQINT
    <{
      264 PUSHINT
      LDSLICEX
      LDGRAMS
      64 LDU
      NEWC
      s0 s4 s8 XCPUXC
      264 PUSHINT
      DICTADDB
      39 THROWIFNOT
      1852798053 PUSHINT
      0 PUSHINT
      4 PUSHINT
      24 PUSHINT
      NEWC
      6 STU
      3 STU
      s0 s6 XCHG2
      STSLICER
      s0 s4 XCHG2
      STGRAMS
      s1 s4 XCHG
      107 STU
      s1 s2 XCHG
      32 STU
      64 STU
      ENDC
      3 PUSHINT
      SENDRAWMSG
      s0 s2 XCHG
    }> IFREF
    SWAP
    3 EQINT
    <{
      s0 POP
    }> PUSHCONT
    <{
      264 PUSHINT
      LDSLICEX
      LDGRAMS
      64 LDU
      s0 POP
      s2 s5 PUXC
      264 PUSHINT
      DICTDEL
      39 THROWIFNOT
      1685288050 PUSHINT
      0 PUSHINT
      4 PUSHINT
      24 PUSHINT
      NEWC
      6 STU
      3 STU
      s0 s5 XCHG2
      STSLICER
      s0 s3 XCHG2
      STGRAMS
      s1 s3 XCHG
      107 STU
      32 STU
      s1 s2 XCHG
      64 STU
      ENDC
      3 PUSHINT
      SENDRAWMSG
    }> IFREFELSE
    s0 s3 XCHG
    INC
    NEWC
    32 STU
    s1 s2 XCHG
    32 STU
    256 STU
    STDICT
    ENDC
    c4 POP
  }>
  recv_internal PROC:<{
    SWAP
    CTOS
    4 LDU
    OVER
    1 PUSHINT
    AND
    <{
      4 BLKDROP
    }> PUSHCONT
    IFJMP
    s2 PUSH
    SBITS
    32 LESSINT
    <{
      4 BLKDROP
    }> PUSHCONT
    IFJMP
    s0 s2 XCHG
    32 LDU
    OVER
    1886156135 PUSHINT
    NEQ
    s2 PUSH
    1685288050 PUSHINT
    NEQ
    AND
    <{
      5 BLKDROP
    }> PUSHCONT
    IFJMP
    s0 s3 XCHG
    LDMSGADDR
    s0 POP
    DUP
    REWRITESTDADDR
    SWAP
    NEWC
    8 STI
    256 STU
    ENDC
    CTOS
    c4 PUSH
    CTOS
    320 PUSHINT
    SDSKIPFIRST
    LDDICT
    s0 POP
    DUP2
    264 PUSHINT
    DICTGET
    NULLSWAPIFNOT
    NIP
    NOT
    <{
      7 BLKDROP
    }> PUSHCONT
    IFJMP
    s0 s5 XCHG
    64 LDU
    NEWC
    s5 PUSH
    1886156135 PUSHINT
    EQUAL
    <{
      s8 POP
      s0 POP
    }> PUSHCONT
    <{
      SWAP
      LDGRAMS
      LDDICT
      s0 POP
      BALANCE
      2 UNTUPLE
      s0 POP
      s0 s10 XCHG2
      SUB
      OVER
      GEQ
      80 THROWIFNOT
      1886156135 PUSHINT
      31 PUSHPOW2
      OR
      0 PUSHINT
      24 PUSHINT
      s0 s4 XCHG2
      6 STU
      s6 PUSH
      STSLICER
      ROT
      STGRAMS
      s1 s9 XCHG
      STDICT
      106 STU
      s1 s7 XCHG
      32 STU
      s6 s1 PUXC
      64 STU
      DUP
      ENDC
      64 PUSHINT
      SENDRAWMSG
      s0 s6 XCHG
    }> IFREFELSE
    s0 s3 XCHG
    1685288050 PUSHINT
    EQUAL
    <{
      6 BLKDROP
    }> PUSHCONT
    <{
      s0 s4 XCHG2
      264 PUSHINT
      DICTDEL
      s0 POP
      c4 PUSH
      CTOS
      320 PUSHINT
      SDCUTFIRST
      NEWC
      SWAP
      STSLICER
      STDICT
      ENDC
      c4 POP
      SWAP
      2 PUSHINT
      AND
      <{
        1685288050 PUSHINT
        31 PUSHPOW2
        OR
        0 PUSHINT
        24 PUSHINT
        s0 s5 XCHG2
        6 STU
        s0 s3 XCHG2
        STSLICER
        s3 PUSH
        STGRAMS
        s1 s3 XCHG
        107 STU
        32 STU
        64 STU
        ENDC
        64 PUSHINT
        SENDRAWMSG
      }> PUSHCONT
      <{
        3 BLKDROP
      }> PUSHCONT
      IFELSE
    }> IFREFELSE
  }>
  is_plugin_installed PROC:<{
    c4 PUSH
    CTOS
    320 PUSHINT
    SDSKIPFIRST
    LDDICT
    s0 POP
    s0 s2 XCHG
    NEWC
    8 STI
    256 STU
    ENDC
    CTOS
    SWAP
    264 PUSHINT
    DICTGET
    NULLSWAPIFNOT
    NIP
  }>
  get_public_key PROC:<{
    c4 PUSH
    CTOS
    64 PUSHINT
    SDSKIPFIRST
    256 PLDU
  }>
  get_subwallet_id PROC:<{
    c4 PUSH
    CTOS
    32 PUSHINT
    SDSKIPFIRST
    32 PLDU
  }>
  seqno PROC:<{
    c4 PUSH
    CTOS
    32 PLDU
  }>
  get_plugin_list PROC:<{
    NULL
    c4 PUSH
    CTOS
    320 PUSHINT
    SDSKIPFIRST
    LDDICT
    s0 POP
    <{
      264 PUSHINT
      DICTREMMIN
      NULLSWAPIFNOT2
      s2 POP
      OVER
      <{
        8 LDI
        256 LDU
        s0 POP
        2 TUPLE
        s0 s3 XCHG2
        2 TUPLE
        s0 s2 XCHG
      }> PUSHCONT
      <{
        s0 POP
      }> PUSHCONT
      IFELSE
      NOT
    }> PUSHCONT
    UNTIL
    s0 POP
  }>
}END>c"
`;
